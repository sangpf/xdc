package com.newins.service.imp;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.newins.controller.Daily3UpdateController;
import com.newins.dao.Daily3UpdateDao;
import com.newins.dao.MyAssessDao;
import com.newins.model.AssessOrder;
import com.newins.model.Daily3UpdateItem;
import com.newins.model.SurveyOrder;
import com.newins.model.VoteOrder;
import com.newins.model.page.DailyUpdate;
import com.newins.service.AssessOrderService;
import com.newins.service.Daily3UpdateService;
import com.newins.service.SurveyOrderService;
import com.newins.service.VoteOrderService;
import com.newins.util.AjaxResult;
import com.newins.util.CommonComparator;
import com.newins.util.ErrorMessage;
import com.newins.util.StrUtils;

/**
 * @Description 每日三更service
 */
@Service(value = "Daily3UpdateService")
public class Daily3UpdateServiceImp implements Daily3UpdateService {
	private static Logger log = Logger.getLogger(Daily3UpdateController.class);
	@Autowired
	private Daily3UpdateDao daily3UpdateDao;
	@Autowired
	private SurveyOrderService surveyOrderService;
	@Autowired
	private AssessOrderService assessOrderService;
	@Autowired
	private VoteOrderService voteOrderService;
	@Autowired
	private MyAssessDao myAssessDao;
	
	// 加载每日三更列表
	public AjaxResult getDaily3UpdateList_new(int userId, int page, String qnListCategory){
		
		Map<String, Object> dataMap = new HashMap<>();
		
		dataMap.put("userId", userId);
		dataMap.put("qnListCategory", qnListCategory);
		
		// 查询所有的测评 , 调查, 投票问卷
		List<DailyUpdate> daily3UpdateList = daily3UpdateDao.getDaily3UpdateList(dataMap);
		
		Iterator<DailyUpdate> iterator_0 = daily3UpdateList.iterator();
		while(iterator_0.hasNext()){
			DailyUpdate dailyUpdate = iterator_0.next();
			dailyUpdate.setItemType("qn");
			
			String getbTime = dailyUpdate.getbTime();
			if(StrUtils.isNotEmpty(getbTime)){
				String newbTime = getbTime.substring(0, 10);
				dailyUpdate.setbTime(newbTime);
			}
			
			String geteTime = dailyUpdate.geteTime();
			if(StrUtils.isNotEmpty(geteTime)){
				String neweTime = geteTime.substring(0, 10);
				dailyUpdate.seteTime(neweTime);
			}
			
			// 封装 tags
			List<String> tags = new ArrayList<>();
			for (int j = 0; j < 5; j++) {
				String tag = dailyUpdate.getTagByIndex(j + 1);
				if (StrUtils.isNotEmpty(tag)) {
					tags.add(tag);
				}
			}

			dailyUpdate.setTags(tags);
			
			Integer deliveryId = dailyUpdate.getDeliveryId();
			
			
			
		}
		
		// 查询所有的报告
//		List<DailyUpdate> reportList = daily3UpdateDao.getReportList(qnListCategory);
//		
//		Iterator<DailyUpdate> iterator_1 = reportList.iterator();
//		while(iterator_1.hasNext()){
//			DailyUpdate dailyUpdate = iterator_1.next();
//			dailyUpdate.setItemType("report");
//			
//			String getpTime = dailyUpdate.getpTime();
//			if(StrUtils.isNotEmpty(getpTime)){
//				String newpTime = getpTime.substring(0, 10);
//				dailyUpdate.setpTime(newpTime);
//			}
//		}
		
		// 查询所有的推文
//		List<DailyUpdate> tweetList = daily3UpdateDao.getTweetList(qnListCategory);
//		
//		Iterator<DailyUpdate> iterator_2 = tweetList.iterator();
//		while(iterator_2.hasNext()){
//			DailyUpdate dailyUpdate = iterator_2.next();
//			dailyUpdate.setItemType("tweet");
//			
//			String getpTime = dailyUpdate.getpTime();
//			if(StrUtils.isNotEmpty(getpTime)){
//				String newpTime = getpTime.substring(0, 10);
//				dailyUpdate.setpTime(newpTime);
//			}
//		}
		
		// 剔除所有 该用户已经答过的题
		
		// 重新排序
		List<DailyUpdate> dataList = new ArrayList<>();
		dataList.addAll(daily3UpdateList);
//		dataList.addAll(reportList);
//		dataList.addAll(tweetList);
		
		Collections.sort(dataList, new Comparator<DailyUpdate>() {

			@Override
			public int compare(DailyUpdate o1, DailyUpdate o2) {
				
				int i = o1.getIsTop() - o2.getIsTop();
				if(i == 0){
					return o1.getShowOrder() - o2.getShowOrder();
				}
				
				return i;
			}
			
		});
		
		AjaxResult ajaxResult = new AjaxResult();
		// 返回数据
		// 从List中分页
		// 先判断分页前List长度是否为0，若为0就不需要分页
		if (dataList.size() != 0) {
			List<DailyUpdate> d3uPageList = null;// 返回的分页List
			int bIndex = (page - 1) * 10;
			int eIndex = (page - 1) * 10 + 9;
			int totalPage = 0;
			if (dataList.size() % 10 == 0) {
				totalPage = dataList.size() / 10;
			} else {
				totalPage = dataList.size() / 10 + 1;
			}
			if (bIndex > dataList.size() - 1) {
				
				return AjaxResult.errorCode("bIndex is greater than list size", "002");
			}
			if (eIndex < dataList.size() - 1) {
				d3uPageList = dataList.subList(bIndex, eIndex + 1);
			} else {
				d3uPageList = dataList.subList(bIndex, dataList.size());
			}

			ajaxResult.put("success", "true");
			ajaxResult.put("totalPage", totalPage);
			ajaxResult.put("record", d3uPageList);
			
			return ajaxResult;
		} else {
			ajaxResult.put("success", "true");
			ajaxResult.put("totalPage", 1);
			ajaxResult.put("record", dataList);
			return ajaxResult;
		}
	}

	/**
	 * 加载每日三更的列表
	 */
	public AjaxResult getDaily3UpdateList(int userId, int page, String qnListCategory) {
		
		// 获得三更列表的信息，包括调查、测评 和 投票(已弃用)
		
		// 首页列表中要加载的总的 调查问卷
		List<Daily3UpdateItem> surveyList = daily3UpdateDao.getSurveyList(qnListCategory);
		// 从 订单表中 查询所有投放的 获奖人数,收集份数
		List<Daily3UpdateItem> getSurveyOrderList = daily3UpdateDao.getSurveyOrderData();
		for (int i = 0; i < surveyList.size(); i++) {
			
			surveyList.get(i).setItemType("qn");
			
			for (int j = 0; j < getSurveyOrderList.size(); j++) {
				// 
				if (surveyList.get(i).getDeliveryId() == getSurveyOrderList.get(j).getDeliveryId()) {
					// 设置收集份数, 获奖人数
					surveyList.get(i).setCollectedNum(getSurveyOrderList.get(j).getCollectedNum());
					surveyList.get(i).setWinnerNum(getSurveyOrderList.get(j).getWinnerNum());
				}
			}
		}
		
		List<Daily3UpdateItem> assessList = daily3UpdateDao.getAssessList(qnListCategory);
		List<Daily3UpdateItem> getAssessOrderList = daily3UpdateDao.getAssessOrderData();
		for (int i = 0; i < assessList.size(); i++) {
			assessList.get(i).setItemType("qn");
			for (int j = 0; j < getAssessOrderList.size(); j++) {
				// 设置测评问卷的 获奖人数, 收集份数
				if (assessList.get(i).getDeliveryId()==getAssessOrderList.get(j).getDeliveryId()) {
					assessList.get(i).setCollectedNum(getAssessOrderList.get(j).getCollectedNum());
					assessList.get(i).setWinnerNum(getAssessOrderList.get(j).getWinnerNum());
				}
			}
		}
		
//		List<Daily3UpdateItem> voteList = daily3UpdateDao.getVoteList(qnListCategory);
//		List<Daily3UpdateItem> getVoteOrderList = daily3UpdateDao.getVoteOrderData();
//		for (int i = 0; i < voteList.size(); i++) {
//			voteList.get(i).setItemType("qn");
//			for (int j = 0; j < getVoteOrderList.size(); j++) {
//				if (voteList.get(i).getDeliveryId()==getVoteOrderList.get(j).getDeliveryId()) {
//					voteList.get(i).setCollectedNum(getVoteOrderList.get(j).getCollectedNum());
//					voteList.get(i).setWinnerNum(getVoteOrderList.get(j).getWinnerNum());
//				}
//			}
//		}
		
		// ----------------- 报告 -------------------
		List<Daily3UpdateItem> reportList = daily3UpdateDao.getReportList(qnListCategory);
		for (int i = 0; i < reportList.size(); i++) {
			if (reportList.get(i).getpTime()!=null) {
				//处理时间格式
				String time = reportList.get(i).getpTime();
				String newTime = time.substring(0, 10);
				reportList.get(i).setpTime(newTime);
			}
			
			try {
				//插入isFavorite属性
				int isFavorite = this.getUserIsFavorite(userId, reportList.get(i).getReportId());
				reportList.get(i).setIsFavorite(isFavorite);
			} catch (Exception e) {
				e.printStackTrace();
			}
			reportList.get(i).setItemType("report");
		}
		
		//-------------- 推文 ----------
		List<Daily3UpdateItem> tweetList = daily3UpdateDao.getTweetList(qnListCategory);
		for (int i = 0; i < tweetList.size(); i++) {
			if (tweetList.get(i).getpTime()!=null) {
				//处理时间格式
				String time = tweetList.get(i).getpTime();
				String newTime = time.substring(0, 10);
				tweetList.get(i).setpTime(newTime);
			}
			tweetList.get(i).setItemType("tweet");
		}
		
		List<Daily3UpdateItem> d3uList = new ArrayList<Daily3UpdateItem>();
		d3uList.addAll(surveyList);
		d3uList.addAll(assessList);
//		d3uList.addAll(voteList);
		d3uList.addAll(reportList);
		d3uList.addAll(tweetList);
		
		// 使用比较器 排序
		Collections.sort(d3uList, new Comparator<Daily3UpdateItem>() {

			public int compare(Daily3UpdateItem o1, Daily3UpdateItem o2) {
				int i = o1.getIsTop() - o2.getIsTop();
				if(i == 0){
					return o1.getShowOrder() - o2.getShowOrder();
				}
				return i;
			}
			
		});
		
//		// 初始化一个比较器
//		CommonComparator comparator = new CommonComparator();
//		// order by isTop showOrder
//		comparator.setFields_user(new String[] { "isTop", "showOrder" });
//		Collections.sort(d3uList, comparator);

		// 实例化三种问卷的idList
		List<Integer> sqnIdList = new ArrayList<Integer>();
		List<Integer> aqnIdList = new ArrayList<Integer>();
//		List<Integer> vqnIdList = new ArrayList<Integer>();
		// 实例化三种Order的List

		List<SurveyOrder> surveyOrderList = new ArrayList<SurveyOrder>();
		List<AssessOrder> assessOrderList = new ArrayList<AssessOrder>();
//		List<VoteOrder> voteOrderList = new ArrayList<VoteOrder>();
		
		// 根据问卷类型将问卷的Id存到相应的List
		for (int i = 0; i < d3uList.size(); i++) {
			Daily3UpdateItem d3uItem = d3uList.get(i);
			d3uItem.setAnswered(0);// 都设置为未答过，答过下面的会从List中remove
			if (d3uItem.getQnType() == 1) {
				sqnIdList.add(d3uItem.getQnId());
			} else if (d3uItem.getQnType() == 2) {
				aqnIdList.add(d3uItem.getQnId());
			}
//			else {
//				vqnIdList.add(d3uItem.getQnId());
//			}
		}
		// 该用户所有的调查、测评、投票订单
		if (sqnIdList.size() != 0) {
			surveyOrderList = surveyOrderService.searchOrderBySqnIdList(userId, sqnIdList);
			log.info("=================>该用户已存在的调查订单" + surveyOrderList);
		}
		if (aqnIdList.size() != 0) {
			assessOrderList = assessOrderService.searchOrderByAqnIdList(userId, aqnIdList);
			log.info("=================>该用户已存在的测评订单" + assessOrderList);
		}
//		if (vqnIdList.size() != 0) {
//			voteOrderList = voteOrderService.searchOrderByVqnIdList(userId,
//					vqnIdList);
//			log.info("=================>该用户已存在的投票订单" + voteOrderList);
//		}

		// qnId在调查里对应sqnId,在测评里对应aqnId,在投票里对应vqnId
		int qnId, qnType;	//修复double bug
		Daily3UpdateItem d3uItem = null;
		for (int i = 0; i < d3uList.size(); i++) {
			if (d3uList.get(i).getItemType().equals("qn")) {
				try {
					d3uItem = d3uList.get(i);
//					deliveryId = d3uItem.getDeliveryId();
					qnId = d3uItem.getQnId();
					qnType = d3uItem.getQnType();
					int answered = 0;
					// 判断用户是否答过，答过直接从list中去掉
					// 从调查订单list里查
					if (qnType == 1 && surveyOrderList != null) {
						for (int j = 0; j < surveyOrderList.size(); j++) {
							SurveyOrder surveyOrder = surveyOrderList.get(j);
							if (qnId == surveyOrder.getSqnId()) {
								answered = 1;
								break;
							}
						}
					}
					// 从测评订单List里查
					if (qnType == 2 && assessOrderList != null) {
						for (int j = 0; j < assessOrderList.size(); j++) {
							AssessOrder assessOrder = assessOrderList.get(j);
							if (qnId == assessOrder.getAqnId()) {
								answered = 1;
								break;
							}
						}
					}
					// 从投票订单List里查
//					if (qnType == 3 && voteOrderList != null) {
//						for (int j = 0; j < voteOrderList.size(); j++) {
//							VoteOrder voteOrder = voteOrderList.get(j);
//							if (qnId == voteOrder.getVqnId()) {
//								answered = 1;
//								break;
//							}
//						}
//					}
					// 答过直接将从三更List中remove，同时break，不再执行以下操作
					if (answered == 1) {
						d3uList.remove(i);
						i = i - 1;
						continue;
					}

					// 接收不为空的tag
					List<String> tags = new ArrayList<>();
					for (int j = 0; j < 5; j++) {
						String tag = d3uItem.getTagByIndex(j + 1);
						if (tag != null && !("".equals(tag))) {
							tags.add(tag);
						}
					}

					d3uItem.setTags(tags);

					// 设置奖励类型
					if (d3uItem.getAwardId() == 0 && d3uItem.getLotteryId() == null) {
						d3uItem.setawardMethod(0);
					} else if (d3uItem.getAwardId() != 0 && d3uItem.getLotteryId() == null) {
						d3uItem.setawardMethod(1);
					} else if (d3uItem.getAwardId() == 0 && d3uItem.getLotteryId() != null) {
						d3uItem.setawardMethod(2);
					}
				
				} catch (Exception e) {
					System.out.println("deliveryId可能为空");
					e.printStackTrace();
				}
			}
		}

		AjaxResult ajaxResult = new AjaxResult();
		
		// 从List中分页
		// 先判断分页前List长度是否为0，若为0就不需要分页
		log.info("==========================>> 先判断分页前List长度是否为0，若为0就不需要分页 , d3uList.size() :"+d3uList.size());
		if (d3uList.size() != 0) {
			List<Daily3UpdateItem> d3uPageList = null;// 返回的分页List
			int bIndex = (page - 1) * 10;
			int eIndex = (page - 1) * 10 + 9;
			int totalPage = 0;
			if (d3uList.size() % 10 == 0) {
				totalPage = d3uList.size() / 10;
			} else {
				totalPage = d3uList.size() / 10 + 1;
			}
			if (bIndex > d3uList.size() - 1) {
				return AjaxResult.errorCode("bIndex is greater than list size", "002");
			}
			if (eIndex < d3uList.size() - 1) {
				d3uPageList = d3uList.subList(bIndex, eIndex + 1);
			} else {
				d3uPageList = d3uList.subList(bIndex, d3uList.size());
			}
			
			ajaxResult.put("success", "true");
			ajaxResult.put("totalPage", totalPage);
			ajaxResult.put("record", d3uPageList);
			
			return ajaxResult;
		} else {
			
			ajaxResult.put("success", "true");
			ajaxResult.put("totalPage", 1);
			ajaxResult.put("record", d3uList);
			
			return ajaxResult;
		}
	}
	// ================================= 首页列表加载 end ===========================
	
	public int getUserIsFavorite(int userId, int reportId) {
		//调用Dao层方法
		int num = myAssessDao.userIsFavorite(userId, reportId);
		if (num!=0) {			
			return 1;
		}else {
			return 0;
		}
	}

	public Daily3UpdateItem getOrderData(Map<String, Object> param){
		log.info("***************星仔记录***************进入的方法,查看一下map的值"+param.get("qnType")+"delivery的值:"+param.get("deliveryId"));
		Daily3UpdateItem d3uItem = null;
		List<Daily3UpdateItem> tempD3uItem = null;
		
		if (param.get("qnType").equals("1")||param.get("qnType")=="1"||Integer.parseInt(param.get("qnType").toString())==1) {
			log.info("***************星仔记录***************进入了if");
			tempD3uItem = daily3UpdateDao.getSurveyOrderData();
			for (int i = 0; i < tempD3uItem.size(); i++) {
				if (param.get("deliveryId").equals(tempD3uItem.get(i).getDeliveryId())||Integer.parseInt(param.get("deliveryId").toString())==tempD3uItem.get(i).getDeliveryId()) {
					log.info("***************星仔记录***************"+tempD3uItem.get(i).getCollectedNum());
					log.info("***************星仔记录***************"+tempD3uItem.get(i).getWinnerNum());
					d3uItem.setCollectedNum(tempD3uItem.get(i).getCollectedNum());
					d3uItem.setWinnerNum(tempD3uItem.get(i).getWinnerNum());
					return d3uItem;
				}
			}
		}else if (param.get("qnType").equals("2")||param.get("qnType")=="2"||Integer.parseInt(param.get("qnType").toString())==1) {
			tempD3uItem = daily3UpdateDao.getAssessOrderData();
			for (int i = 0; i < tempD3uItem.size(); i++) {
				if (param.get("deliveryId").equals(tempD3uItem.get(i).getDeliveryId())||Integer.parseInt(param.get("deliveryId").toString())==tempD3uItem.get(i).getDeliveryId()) {
					d3uItem.setCollectedNum(tempD3uItem.get(i).getCollectedNum());
					d3uItem.setWinnerNum(tempD3uItem.get(i).getWinnerNum());
					return d3uItem;
				}
			}
		}else if (param.get("qnType").equals("3")||param.get("qnType")=="3"||Integer.parseInt(param.get("qnType").toString())==1) {
			tempD3uItem = daily3UpdateDao.getVoteOrderData();
			for (int i = 0; i < tempD3uItem.size(); i++) {
				if (param.get("deliveryId").equals(tempD3uItem.get(i).getDeliveryId())||Integer.parseInt(param.get("deliveryId").toString())==tempD3uItem.get(i).getDeliveryId()) {
					d3uItem.setCollectedNum(tempD3uItem.get(i).getCollectedNum());
					d3uItem.setWinnerNum(tempD3uItem.get(i).getWinnerNum());
					return d3uItem;
				}
			}
		}
		return d3uItem;
	}
	
	
}
